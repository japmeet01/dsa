// Bf algorith
// 1. To find single source shortest path
// 2. To find whether a graph has a negative cycle or not

// Algo:

// 1. Apply the below formula n-1 times on all edges
//  if(dist[u] + wt < dis[v]){
//     dist[v] = dist[u] + wt;
//  }

// 2. Apply this formula 1 more time,
// if distance gets updated then negative cycle is present
// else return dist

// Time Complexity: O(N*E). We check E edges N times
// Space Complexity: O(N). Distance Array

class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int n, vector<vector<int>>& edges, int S) {
        vector<int> dist(n , 1e8);

        dist[S] = 0;

        // n-1 times
        for(int i = 1;i<=n;i++){
            // traverse on edgelist
            for(int j = 0;j<edges.size();j++){
                int u = edges[j][0];
                int v = edges[j][1];
                int wt = edges[j][2];

                if((dist[u] + wt < dist[v]) && dist[u] != 1e8){
                    dist[v] = dist[u] + wt;
                }

            }
        }

        // check for negative cycle

        bool flag = 0;
        for(int j = 0;j<edges.size();j++){
                int u = edges[j][0];
                int v = edges[j][1];
                int wt = edges[j][2];

                if((dist[u] + wt < dist[v]) && dist[u] != 1e9){
                    flag = true;
                }

            }

            if(flag){
                return {-1};
            }

            return dist;

    }
};
